/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "datafuselabs.io/datafuse-operator/pkg/apis/datafuse/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatafuseOperatorLister helps list DatafuseOperators.
// All objects returned here must be treated as read-only.
type DatafuseOperatorLister interface {
	// List lists all DatafuseOperators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatafuseOperator, err error)
	// DatafuseOperators returns an object that can list and get DatafuseOperators.
	DatafuseOperators(namespace string) DatafuseOperatorNamespaceLister
	DatafuseOperatorListerExpansion
}

// datafuseOperatorLister implements the DatafuseOperatorLister interface.
type datafuseOperatorLister struct {
	indexer cache.Indexer
}

// NewDatafuseOperatorLister returns a new DatafuseOperatorLister.
func NewDatafuseOperatorLister(indexer cache.Indexer) DatafuseOperatorLister {
	return &datafuseOperatorLister{indexer: indexer}
}

// List lists all DatafuseOperators in the indexer.
func (s *datafuseOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.DatafuseOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatafuseOperator))
	})
	return ret, err
}

// DatafuseOperators returns an object that can list and get DatafuseOperators.
func (s *datafuseOperatorLister) DatafuseOperators(namespace string) DatafuseOperatorNamespaceLister {
	return datafuseOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatafuseOperatorNamespaceLister helps list and get DatafuseOperators.
// All objects returned here must be treated as read-only.
type DatafuseOperatorNamespaceLister interface {
	// List lists all DatafuseOperators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatafuseOperator, err error)
	// Get retrieves the DatafuseOperator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatafuseOperator, error)
	DatafuseOperatorNamespaceListerExpansion
}

// datafuseOperatorNamespaceLister implements the DatafuseOperatorNamespaceLister
// interface.
type datafuseOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatafuseOperators in the indexer for a given namespace.
func (s datafuseOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatafuseOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatafuseOperator))
	})
	return ret, err
}

// Get retrieves the DatafuseOperator from the indexer for a given namespace and name.
func (s datafuseOperatorNamespaceLister) Get(name string) (*v1alpha1.DatafuseOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafuseoperator"), name)
	}
	return obj.(*v1alpha1.DatafuseOperator), nil
}
