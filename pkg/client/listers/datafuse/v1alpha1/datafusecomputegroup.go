/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "datafuselabs.io/datafuse-operator/pkg/apis/datafuse/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatafuseComputeGroupLister helps list DatafuseComputeGroups.
// All objects returned here must be treated as read-only.
type DatafuseComputeGroupLister interface {
	// List lists all DatafuseComputeGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatafuseComputeGroup, err error)
	// DatafuseComputeGroups returns an object that can list and get DatafuseComputeGroups.
	DatafuseComputeGroups(namespace string) DatafuseComputeGroupNamespaceLister
	DatafuseComputeGroupListerExpansion
}

// datafuseComputeGroupLister implements the DatafuseComputeGroupLister interface.
type datafuseComputeGroupLister struct {
	indexer cache.Indexer
}

// NewDatafuseComputeGroupLister returns a new DatafuseComputeGroupLister.
func NewDatafuseComputeGroupLister(indexer cache.Indexer) DatafuseComputeGroupLister {
	return &datafuseComputeGroupLister{indexer: indexer}
}

// List lists all DatafuseComputeGroups in the indexer.
func (s *datafuseComputeGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DatafuseComputeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatafuseComputeGroup))
	})
	return ret, err
}

// DatafuseComputeGroups returns an object that can list and get DatafuseComputeGroups.
func (s *datafuseComputeGroupLister) DatafuseComputeGroups(namespace string) DatafuseComputeGroupNamespaceLister {
	return datafuseComputeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatafuseComputeGroupNamespaceLister helps list and get DatafuseComputeGroups.
// All objects returned here must be treated as read-only.
type DatafuseComputeGroupNamespaceLister interface {
	// List lists all DatafuseComputeGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatafuseComputeGroup, err error)
	// Get retrieves the DatafuseComputeGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatafuseComputeGroup, error)
	DatafuseComputeGroupNamespaceListerExpansion
}

// datafuseComputeGroupNamespaceLister implements the DatafuseComputeGroupNamespaceLister
// interface.
type datafuseComputeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatafuseComputeGroups in the indexer for a given namespace.
func (s datafuseComputeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatafuseComputeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatafuseComputeGroup))
	})
	return ret, err
}

// Get retrieves the DatafuseComputeGroup from the indexer for a given namespace and name.
func (s datafuseComputeGroupNamespaceLister) Get(name string) (*v1alpha1.DatafuseComputeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datafusecomputegroup"), name)
	}
	return obj.(*v1alpha1.DatafuseComputeGroup), nil
}
